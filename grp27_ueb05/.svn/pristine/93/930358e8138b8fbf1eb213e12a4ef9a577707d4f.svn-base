package grp27_ueb05;

import java.util.Arrays;

/**
 *
 * @author Robin
 */
public class Color {

    private int red;
    private int green;
    private int blue;

    public enum ColorName {

        RED, ORANGE, YELLOW, BLUEVIOLET, BLUE, GREEN, GREY, BLACK, WHITE
    }

    private final static int[][] COLOR_VALUES = {{0xFF, 0x00, 0x00}, {0xFF, 0x45, 0x00},
    {0xFF, 0xFF, 0x00}, {0x8A, 0x2B, 0xE2}, {0x00, 0x00, 0xFF}, {0x00, 0xFF, 0x00},
    {0xBE, 0xBE, 0xBE}, {0x00, 0x00, 0x00}, {0xFF, 0xFF, 0xFF}};

    public static void main(String[] args) {

        //Konstruktor für einzelne Farbwerte ergibt definierte Farbe
        // Input: drei einzelne Werte
        Color color = new Color(0xFF, 0, 0); // RED
        // Input: Array mit Werten
        Color color2 = new Color(new int[]{0xFF, 0x45, 0}); // ORANGE
        // Input: Element vom Farbenum
        Color color3 = new Color(ColorName.YELLOW); // YELLOW
        // Input: Farbe als String
        Color color4 = new Color("blueviolet"); // BLUEVIOLET
        // Input: Falscher String
        Color color5 = new Color("gibtsNichtFarbe"); // FEHLER

        assert Arrays.equals(new int[]{0xFF, 0, 0}, color.getRGB());
        assert "RED".equals(color.toString());
        assert Arrays.equals(new int[]{0xFF, 0x45, 0}, color2.getRGB());
        assert "ORANGE".equals(color2.toString());
        assert Arrays.equals(new int[]{0xFF, 0xFF, 0x00}, color3.getRGB());
        assert "YELLOW".equals(color3.toString());
        assert Arrays.equals(new int[]{0x8A, 0x2B, 0xE2}, color4.getRGB());
        assert "BLUEVIOLET".equals(color4.toString());
        assert Arrays.equals(new int[]{0x00, 0x00, 0x00}, color5.getRGB());
        assert "BLACK".equals(color5.toString());

        //Konstruktor für einzelne Farbwerte ergibt undefinierte Farbe
        color = new Color(10, 128, 255);
        assert Arrays.equals(new int[]{10, 128, 255}, color.getRGB());
        assert "# A80FF".equals(color.toString());

        assert 9055202 == color4.getPackedRGB();
        

    }

    /**
     * Konstruktor für direkte Farbwertsetzung
     *
     * @param red
     * @param green
     * @param blue
     */
    public Color(int red, int green, int blue) {
        this.red = red;
        this.green = green;
        this.blue = blue;
        //this.blue = Integer.parseInt(Integer.toHexString(blue), 16);
    }

    public Color(int farbArray[]) {
        this(farbArray[0], farbArray[1], farbArray[2]);
    }

    public Color(ColorName nameOfColor) {
        this(COLOR_VALUES[nameOfColor.ordinal()]);
    }

    public Color(String nameOfColor) {
        this(isColorName(nameOfColor.toUpperCase()) ? ColorName.valueOf(nameOfColor.toUpperCase()) : ColorName.BLACK);

    }

    public static boolean isColorName(String nameOfInputColor) {

        for (ColorName nameOfEnumColor : ColorName.values()) {
            if (nameOfEnumColor.toString().equals(nameOfInputColor)) {
                return true;
            }
        }

        return false;
    }

    public int[] getRGB() {

        int[] arrayForRGB = {this.red, this.green, this.blue};
        return arrayForRGB;
    }

    public int getRGB(int channel) {
        if (channel == 1) {
            return this.red;
        } else if (channel == 2) {
            return this.green;
        } else if (channel == 3) {
            return this.blue;
        } else {
            return -1;
        }
    }

    public int getPackedRGB() {
        return Integer.parseInt(Integer.toHexString(this.red).toUpperCase() + Integer.toHexString(this.green).toUpperCase() + Integer.toHexString(this.blue).toUpperCase(), 16);
    }

    @Override
    public String toString() {
        for (int i = 0; i < COLOR_VALUES.length; i++) {
            if (COLOR_VALUES[i][0] == this.red && COLOR_VALUES[i][1] == this.green && COLOR_VALUES[i][2] == this.blue) {

                return (ColorName.values()[i]).toString();
            }

        }

        return String.format("#%2s%2s%2s", Integer.toHexString(this.red).toUpperCase(), Integer.toHexString(this.green).toUpperCase(), Integer.toHexString(this.blue).toUpperCase());
    }
}
