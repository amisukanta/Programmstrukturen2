package viergewinnt;

import javafx.scene.layout.Pane;

/**
 * Verwaltet einzelne Zellen in einem zweidimensionalen Array.
 * Das Koordinatensystem beginnt dabei links oben:
 * ___________________
 * |0,0 1,0 ...
 * |0,1 ...
 * |...
 * @author Jan Riemer 
 */
public class CellManager {
    
    /**
     * Die zu verwaltenden Zellen.
     */
    private final Cell[][] cells;
    
    /**
     * Initialisiert einen Zell-Manager.
     * @param columnCount Die Anzahl der Spalten in jeder Reihe.
     * @param rowCount Die Anzahl der Zeilen in jeder Spalte.
     */
    public CellManager(int columnCount, int rowCount) {
        this.cells = new Cell[rowCount][columnCount];
    }
    
    /**
     * Fügt diesem Zell-Manager eine Zelle hinzu und gibt den veränderten
     * Zell-Manager zurück.
     * @param columnIdx Die Spalte, in der die neue Zelle hinzugefügt werden soll
     * @param rowIdx Die Zeile, in der die neue Zelle hinzugefügt werden soll
     * @return Dieser Zell-Manager mit der hinzugefügten Zelle.
     */
    public CellManager addCell(int columnIdx, int rowIdx) {
        Cell newCell = new Cell();
        this.cells[rowIdx][columnIdx] = newCell;
        return this;
    }
    
    /**
     * Gibt die Zelle zurück, welche sich in einer bestimmten
     * Spalte und Zeile befindet.
     * @param col Die Spalte der zurückzugebenden Zelle
     * @param row Die Zeile der zurückzugebenden Zelle
     * @return Die Zelle, welche sich in der angegebenen Spalte
     * und Zeile befindet.
     */
    public Cell getCell(int col, int row) {
        return this.cells[row][col];
    }
    
    /**
     * Gibt die Zelle anhand ihrer Zell-Koordinaten zurück.
     * @param coords Die Koordinaten der zurückzugebenden Zelle
     * @return Die Zelle auf den angegebenen Koordinaten.
     */
    public Cell getCell(CellCoordinates coords) {
        assert (coords != null);
        return this.getCell(coords.getColumnIdx(), coords.getRowIdx());
    }
    
    /**
     * Gibt die Koordinaten der untersten freien Zelle aus einer Spalte zurück. 
     * @param columnIdx Die Spalte, aus der die unterste freie Zelle
     * zurückgegeben werden soll.
     * @return Die Koordinaten der untersten freien Zelle aus der Spalte.
     */
    public CellCoordinates getCoordsForLowestFirstFreeCell(int columnIdx) {
        // TODO: Methode implementieren
        throw new UnsupportedOperationException();
    }
    
    /**
     * Überprüft, ob alle Zellen in diesem Zell-Manager belegt sind.
     * @return true, wenn alle Zellen in diesem Zell-Manager belegt sind,
     * ansonsten false
     */
    public boolean areAllCellsReserved() {
        // TODO: Methode implementieren
        throw new UnsupportedOperationException();
    }
    
    /**
     * Setzt für alle Zellen in diesem Zell-Manager den Event-Handler
     * für das Mouse-Click Event.
     * @param clickHandler Der zu setzende Click-Handler.
     */
    public void setOnMouseClickedForCells(ClickHandler clickHandler) {
        for (Cell[] rows : this.cells) {
            for (Cell cell : rows) {
                cell.setOnMouseClicked(clickHandler);
            }
        }
    }
    
    /**
     * Entfernt für alle Zellen in diesem Zell-Manager den Event-Handler
     * für das Mouse-Click Event.
     */
    public void removeOnMouseClickedForCells() {
        for (Cell[] rows : this.cells) {
            for (Cell cell : rows) {
                cell.removeOnMouseClicked();
            }
        }
    }
    
    /**
     * Überprüft, ob die angegebenen Zell-Koordinaten innerhalb dieses
     * Zell-Managers vorhanden sind.
     * @param coords Die zu überprüfenden Zell-Koordinaten
     * @return true, wenn die angegebenen Zell-Koordinaten innerhalb dieses
     * Zell-Managers vorhanden sind, ansonsten false.
     */
    public boolean areCoordsInBounds(CellCoordinates coords) {
        assert (coords != null);
        // TODO: Methode implementieren
        throw new UnsupportedOperationException();
    }
    
    /**
     * Gibt die Zell-Koordinaten eines Panes zurück, welches sich
     * möglicherweise innerhalb einer Zelle befindet, die von diesem
     * Zell-Manager verwaltet wird.
     * @param pane das Pane, dessen Koordinaten ermittelt werden sollen.
     * @return Die Koordinaten des Panes, falls es innerhalb dieses
     * Zell-Managers gefunden wurde, ansonsten die null-Referenz.
     */
    public CellCoordinates findCellCoords(Pane pane) {
        int rowIdx = 0;
        boolean found = false;
        CellCoordinates result = null;
        while (rowIdx < this.cells.length && !found) {
            int colIdx = 0;
            while (colIdx < this.cells[rowIdx].length && !found) {
                if (this.getCell(colIdx, rowIdx).getPane().equals(pane)) {
                    result = new CellCoordinates(colIdx, rowIdx);
                    found = true;
                }
                colIdx++;
            }
            rowIdx++;
        }
        return result;
    }
    
    /**
     * Gibt, ausgehend von einem Koordinatenursprung,
     * die Anzahl belegter Zellen der längsten Reihe desjenigen Spielers zurück,
     * welcher Inhaber der Zelle ist, die auf dem spezifizierten Koordinaten-
     * ursprung liegt.
     * @param origin Der Koordinatenursprung, von dem ausgegangen werden soll
     * @return Die Anzahl belegter Zellen der längsten Reihe desjenigen
     * Spielers, welcher Inhaber der Zelle ist, die auf dem spezifizierten
     * Koordinatenursprung liegt.
     */
    public int getCountLongestRowOfPlayer(CellCoordinates origin) {
        return this.getLongestRowOfPlayer(origin).length;
    }
    
    /**
     * Gibt, ausgehend von einem Koordinatenursprung,
     * die Zell-Koordinaten zurück, welche die längste Reihe desjenigen Spielers
     * bilden, welcher Inhaber der Zelle ist, die auf dem spezifizierten
     * Koordinatenursprung liegt.
     * Beispiel: Ein Spielfeld habe folgenden Zustand, wobei x (Kleinbuchstabe)
     * bzw. X (Großbuchstabe) die Steine eines Spielers repräsentieren.
     * X (Großbuchstabe) ist dabei gleichzeitig der spezifizierte
     * Koordinatenursprung.
     * _ _ _ _ _ _
     * |   x        <-- dieser Stein hat die Koordinaten (3, 0)
     * |x x
     * | X          <-- dies ist der Stein auf dem Koordinatenursprung (1, 2)
     * |x x         <-- der Stein links unten hat die Koordinaten (0, 3)
     * 
     * Das Ergebnis dieser Methode wäre dann ein Array mit folgenden Koordinaten
     * (Reihenfolge der Elemente im Array ist beliebig):
     * (0, 3), (1, 2), (2, 1), (3, 0)
     * @param origin Der Koordinatenursprung, von dem ausgegangen werden soll
     * @return Die Zell-Koordinaten, welche die längste Reihe desjenigen
     * Spielers bilden, welcher Inhaber der Zelle ist, die auf dem
     * spezifizierten Koordinatenursprung liegt.
     */
    public CellCoordinates[] getLongestRowOfPlayer(CellCoordinates origin) {
        assert (origin != null);
        // TODO: Methode implementieren
        // Tipp: verwendet in dieser Methode
        // die private Methode getLongestRowOfPlayerInDir
        throw new UnsupportedOperationException();
    }
    
    /**
     * Gibt, ausgehend von einem Koordinatenursprung,
     * die Zell-Koordinaten zurück, welche die längste Reihe desjenigen Spielers
     * in eine bestimmte Richtung bilden, welcher Inhaber der Zelle ist,
     * die auf dem spezifizierten Koordinatenursprung liegt.
     * Die entgegengesetzte Richtung wird dabei mit berücksichtigt.
     * @param origin Der Koordinatenursprung, von dem ausgegangen werden soll
     * @param dir Die Richtung, in der die längste Reihe ermittelt werden soll.
     * Die entgegengesetzte Richtung wird automatisch berücksichtigt und braucht
     * nicht separat überprüft zu werden.
     * @return Die Zell-Koordinaten, welche die längste Reihe desjenigen
     * Spielers in eine bestimmte Richtung bilden, welcher Inhaber der Zelle
     * ist, die auf dem spezifizierten Koordinatenursprung liegt.
     */
    private CellCoordinates[] getLongestRowOfPlayerInDir(
            CellCoordinates origin,
            CellCoordinates.Direction dir) {
        // TODO: Methode implementieren
        throw new UnsupportedOperationException();
    }
    
    /******************************** Methoden zum Testen *********************/
    
    public static void startTestSuite() {
        CellManager.testGetCoordsForLowestFirstFreeCell();
        CellManager.testAreAllCellsReserved();
        CellManager.testAreCoordsInBounds();
        CellManager.testGetLongestRowOfPlayer();
    }
    
    private CellManager(Cell[][] cellsForTest) {
        assert (cellsForTest != null);
        this.cells = cellsForTest;
    }
    
    private static void testGetCoordsForLowestFirstFreeCell() {
        System.out.println("-----------------------------------------------------------");
        System.out.println("Teste Methode CellManager.getCoordsForLowestFirstFreeCell");
        
        System.out.println("Noch keine Tests spezifiziert");
    }
    
    private static void testAreAllCellsReserved() {
        System.out.println("-----------------------------------------------------------");
        System.out.println("Teste Methode CellManager.areAllCellsReserved");
        
        System.out.println("Noch keine Tests spezifiziert");
    }
    
    private static void testAreCoordsInBounds() {
        System.out.println("-----------------------------------------------------------");
        System.out.println("Teste Methode CellManager.areCoordsInBounds");
        
        System.out.println("Noch keine Tests spezifiziert");
    }
    
    private static void testGetLongestRowOfPlayer() {
        System.out.println("-----------------------------------------------------------");
        System.out.println("Teste Methode CellManager.getLongestRowOfPlayer");
        
        System.out.println("Noch keine Tests spezifiziert");
    }
}
